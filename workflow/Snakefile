###############################################################################
#  S n a k e m a k e   w o r k f l o w
###############################################################################
import os
ENV_YAML = os.path.join(os.getcwd(), "env", "environment.yml")

configfile: "workflow/config.yaml"
DATASETS   = config["datasets"]
SIG_SIZES  = config["sig_sizes"]
FIXED_K    = config["fixed_k"]

###############################################################################
# Final target ─ all files Snakemake must build
###############################################################################
rule all:
    input:
        # stage-2 metrics
        expand("results/{ds}/stage2/metrics.tsv",                 ds=DATASETS),
        # stage-1 summaries
        expand("results/{ds}/stage1/summary_stage1.tsv",          ds=DATASETS),
        # system fingerprint (one per dataset)
        expand("results/{ds}/stage1/system_info.json",            ds=DATASETS),
        # per-K folders with split & box plots (+ gene bars)
        expand("figures/{ds}/stage1_k{K}",                        ds=DATASETS, K=SIG_SIZES),
        # summary plots: accuracy
        expand("figures/{ds}/stage1_summary/MCE.png",             ds=DATASETS),
        expand("figures/{ds}/stage1_summary/Sensitivity.png",     ds=DATASETS),
        expand("figures/{ds}/stage1_summary/Specificity.png",     ds=DATASETS),
        # summary plots: runtimes
        expand("figures/{ds}/stage1_summary/Train_time.png",      ds=DATASETS),
        expand("figures/{ds}/stage1_summary/Pred_time.png",       ds=DATASETS),

###############################################################################
# Stage-0  –  copy raw → processed 
###############################################################################
rule copy_matrix:
    input:  "data/raw/{ds}.csv"
    output: "data/processed/{ds}_matrix.csv"
    conda:  ENV_YAML
    shell:  "cp {input} {output}"

###############################################################################
# Stage-1  –  variable-K Monte-Carlo CV
###############################################################################
rule mccv_stage1:
    input:
        matrix = "data/processed/{ds}_matrix.csv"
    output:
        metrics = "results/{ds}/stage1/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/freq_k{K}.csv"
    params: k = "{K}"
    conda:  ENV_YAML
    script: "../scripts/python/mccv_stage1.py"

###############################################################################
# Stage-2  –  fixed-signature evaluation (uses most-frequent Kpanel)
###############################################################################
rule stage2_fixed_signature:
    input:
        matrix   = "data/processed/{ds}_matrix.csv",
        gene_set = lambda wc: f"results/{wc.ds}/stage1/freq_k{FIXED_K[wc.ds]}.csv"
    output: "results/{ds}/stage2/metrics.tsv"
    params: fixed = lambda wc: FIXED_K[wc.ds]
    conda:  ENV_YAML
    script: "../scripts/python/stage2_eval.py"

###############################################################################
# Stage-1 visualisations (per K, per classifier)
###############################################################################
rule plot_stage1:
    input:
        metrics = "results/{ds}/stage1/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/freq_k{K}.csv"
    output:
        directory("figures/{ds}/stage1_k{K}")
    params:
        title = lambda wc: f"{wc.ds} | K={wc.K}"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1.py"

###############################################################################
# Stage-1  aggregation  (mean±SE & runtimes)
###############################################################################
rule aggregate_stage1:
    input:
        lambda wc: expand(
            f"results/{wc.ds}/stage1/metrics_k{{K}}.tsv", K=SIG_SIZES
        )
    output:
        "results/{ds}/stage1/summary_stage1.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_stage1.py"

###############################################################################
# Stage-1 summary figures
###############################################################################
rule plot_stage1_summary:
    input:
        "results/{ds}/stage1/summary_stage1.tsv"
    output:
        MCE         = "figures/{ds}/stage1_summary/MCE.png",
        Sensitivity = "figures/{ds}/stage1_summary/Sensitivity.png",
        Specificity = "figures/{ds}/stage1_summary/Specificity.png"
    params: title = lambda wc: wc.ds
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1_summary.py"

###############################################################################
# Stage-1 runtime figures
###############################################################################
rule plot_stage1_runtime:
    input:
        "results/{ds}/stage1/summary_stage1.tsv"
    output:
        train = "figures/{ds}/stage1_summary/Train_time.png",
        pred  = "figures/{ds}/stage1_summary/Pred_time.png"
    params: title = lambda wc: wc.ds
    conda: ENV_YAML
    script: "../scripts/python/plots/plot_runtime.py"
