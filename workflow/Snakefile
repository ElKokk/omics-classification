###############################################################################
#  S n a k e m a k e  w o r k f l o w
###############################################################################
import os
ENV_YAML = os.path.join(os.getcwd(), "env", "environment.yml")

# ------------------------------------------------------------------ #
configfile: "workflow/config.yaml"
DATASETS   = config["datasets"]
SIG_SIZES  = config["sig_sizes"]
FIXED_K    = config["fixed_k"]

###############################################################################
# Final target
###############################################################################
rule all:
    input:
        expand("results/{ds}/stage2/metrics.tsv",     ds=DATASETS),
        expand("results/{ds}/stage1/summary_stage1.tsv", ds=DATASETS),   # ← NEW
        expand("figures/{ds}/stage1_k{K}/per_split.png",      ds=DATASETS, K=SIG_SIZES),
        expand("figures/{ds}/stage1_k{K}/gene_frequency.png", ds=DATASETS, K=SIG_SIZES),
        expand("figures/{ds}/stage1_k{K}/mean_se.png",        ds=DATASETS, K=SIG_SIZES)


###############################################################################
# Stage0 – (I may need it later)
###############################################################################
rule copy_matrix:
    input:  "data/raw/{ds}.csv"
    output: "data/processed/{ds}_matrix.csv"
    conda:  ENV_YAML
    shell:  "cp {input} {output}"

###############################################################################
# Stage1 – variable‑K Monte‑Carlo CV
###############################################################################
rule mccv_stage1:
    input:
        matrix = "data/processed/{ds}_matrix.csv"
    output:
        metrics = "results/{ds}/stage1/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/freq_k{K}.csv"
    params: k = "{K}"
    conda:  ENV_YAML
    script: "../scripts/python/mccv_stage1.py"

###############################################################################
# Stage2 – fixed‑signature evaluation
###############################################################################
rule stage2_fixed_signature:
    input:
        matrix   = "data/processed/{ds}_matrix.csv",
        gene_set = lambda wc: f"results/{wc.ds}/stage1/freq_k{FIXED_K[wc.ds]}.csv"
    output: "results/{ds}/stage2/metrics.tsv"
    params: fixed = lambda wc: FIXED_K[wc.ds]
    conda:  ENV_YAML
    script: "../scripts/python/stage2_eval.py"




###############################################################################
# Stage – figures
###############################################################################
# ─────────────────────────────────────────────────────────────
rule plot_stage1:
    input:
        metrics = "results/{ds}/stage1/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/freq_k{K}.csv"
    output:
        per_split      = "figures/{ds}/stage1_k{K}/per_split.png",
        gene_frequency = "figures/{ds}/stage1_k{K}/gene_frequency.png",
        mean_se        = "figures/{ds}/stage1_k{K}/mean_se.png"
    params:
        title = lambda wc: f"{wc.ds}  |  K={wc.K}",
        method = "LDA"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1.py"


###############################################################################
# Stage 3 – aggregate mean ± SE across 100 splits
###############################################################################
rule aggregate_stage1:
    input:
        lambda wc: expand(
            f"results/{wc.ds}/stage1/metrics_k{{K}}.tsv", K=SIG_SIZES
        )
    output:
        f"results/{{ds}}/stage1/summary_stage1.tsv"
    conda: ENV_YAML
    script: "../scripts/python/aggregate_stage1.py"


