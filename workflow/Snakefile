###############################################################################
#  S n a k e m a k e   w o r k f l o w   (full, corrected – Aug 2025)
###############################################################################
import os
from pathlib import Path
import json
import multiprocessing as mp
import psutil


os.environ["MPLBACKEND"] = "Agg"

# ---------------------------------------------------------------------------
# Config & constants
# ---------------------------------------------------------------------------
configfile: "workflow/config.yaml"


FIG_ROOT   = config.get("fig_root", "Figures")


DATASETS   = list(config.get("datasets", []))
SIG_SIZES  = list(config.get("sig_sizes", []))


MEASURE_CORES = list(config.get("measure_cores", [96]))


RUN_CORES  = str(config.get("run_cores", "NA"))


if config.get("stability_reps_enabled", False):
    STABILITY_REPS = list(range(1, int(config.get("num_stability_reps", 100)) + 1))
else:
    STABILITY_REPS = []


ENV_YAML  = os.path.join(os.getcwd(), "env", "environment.yml")


RUNTIME_FIGS = [
    "Train_mean_vs_K.png",
    "Pred_mean_vs_K.png",
    "Train_total_vs_K.png",
    "Pred_total_vs_K.png",
    "Runtime_total_vs_K.png",
    "Wall_clock_vs_cores.png",
    "Speed_up.png",
    "Train_total_vs_cores.png",
    "Pred_total_vs_cores.png",
    "Train_total_vs_cores_zoom.png",
]

# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------
def ds_list():
    """Prefer a single 'ds' passed on the CLI; else use config['datasets']."""
    if "ds" in config and config["ds"]:
        return [config["ds"]]
    return DATASETS

def stage1_metrics_list(ds, cores):
    return [f"results/{ds}/stage1/cores{cores}/metrics_k{k}.tsv" for k in SIG_SIZES]

def stage2_metrics_list(ds):
    return [f"results/{ds}/stage2/metrics_k{k}.tsv" for k in SIG_SIZES]

def per_split_metrics_list(ds):
    return [f"results/{ds}/stage2/per_split_metrics_k{k}.tsv" for k in SIG_SIZES]

def _inputs_all(wc):
    dsets = ds_list()
    wanted = []


    wanted += [f"results/{ds}/stage1/summary_stage1.tsv"   for ds in dsets]
    wanted += [f"results/{ds}/stage2/summary_stage2.tsv"   for ds in dsets]
    wanted += [f"results/{ds}/stage1/system_info.json"     for ds in dsets]


    for ds in dsets:
        wanted += stage2_metrics_list(ds)


    for ds in dsets:
        wanted += [f"{FIG_ROOT}/{ds}/runtime/{f}" for f in RUNTIME_FIGS]

    # Stage‑1 / Stage‑2 summary figures
    wanted += [f"{FIG_ROOT}/{ds}/stage1_summary/MCE.png"         for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage1_summary/Sensitivity.png" for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage1_summary/Specificity.png" for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage1_summary/SL_weights.png"  for ds in dsets]

    wanted += [f"{FIG_ROOT}/{ds}/stage2_summary/MCE.png"         for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage2_summary/Sensitivity.png" for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage2_summary/Specificity.png" for ds in dsets]
    wanted += [f"{FIG_ROOT}/{ds}/stage2_summary/SL_weights.png"  for ds in dsets]

    # Per‑K figure directories (stage‑1 & stage‑2)
    for ds in dsets:
        for k in SIG_SIZES:
            wanted += [directory(f"{FIG_ROOT}/{ds}/stage1_k{k}")]
            wanted += [directory(f"{FIG_ROOT}/{ds}/stage2_k{k}")]

    # Box summaries
    for ds in dsets:
        wanted += [f"{FIG_ROOT}/{ds}/stage1_box/{m}.png" for m in ["MCE","Sensitivity","Specificity"]]
        wanted += [f"{FIG_ROOT}/{ds}/stage2_box/{m}.png" for m in ["MCE","Sensitivity","Specificity"]]

    # SL weight count bar plots
    for ds in dsets:
        wanted += [f"{FIG_ROOT}/{ds}/stage1/sl_positive_bar.png",
                   f"{FIG_ROOT}/{ds}/stage1/sl_highest_bar.png",
                   f"{FIG_ROOT}/{ds}/stage2/sl_positive_bar.png",
                   f"{FIG_ROOT}/{ds}/stage2/sl_highest_bar.png"]

    # Optional stability-reps artifacts
    if STABILITY_REPS:
        for ds in dsets:
            for k in SIG_SIZES:
                wanted += [f"results/{ds}/stage1/stability_rep{rep}_panel_k{k}.txt" for rep in STABILITY_REPS]
                wanted += [f"results/{ds}/stage1/stability_reps_k{k}.tsv"]
            wanted += [f"{FIG_ROOT}/{ds}/stage1/panel_stability_summary.png"]

    return wanted

def _host_inputs(wc):
    dsets = ds_list()
    items = []
    items += [f"{FIG_ROOT}/{ds}/runtime/Speed_up.png" for ds in dsets]
    items += [f"{FIG_ROOT}/{ds}/stage1_summary/{p}.png" for ds in dsets for p in ["MCE","Sensitivity","Specificity","SL_weights"]]
    items += [f"{FIG_ROOT}/{ds}/stage2_summary/{p}.png" for ds in dsets for p in ["MCE","Sensitivity","Specificity","SL_weights"]]
    for ds in dsets:
        items += [directory(f"{FIG_ROOT}/{ds}/stage1_k{k}") for k in SIG_SIZES]
        items += [directory(f"{FIG_ROOT}/{ds}/stage2_k{k}") for k in SIG_SIZES]
        items += [f"{FIG_ROOT}/{ds}/stage1_box/{m}.png" for m in ["MCE","Sensitivity","Specificity"]]
        items += [f"{FIG_ROOT}/{ds}/stage2_box/{m}.png" for m in ["MCE","Sensitivity","Specificity"]]
        items += [f"{FIG_ROOT}/{ds}/stage1/sl_positive_bar.png",
                  f"{FIG_ROOT}/{ds}/stage1/sl_highest_bar.png",
                  f"{FIG_ROOT}/{ds}/stage2/sl_positive_bar.png",
                  f"{FIG_ROOT}/{ds}/stage2/sl_highest_bar.png"]
    return items

# ---------------------------------------------------------------------------
# Default target
# ---------------------------------------------------------------------------
rule all:
    input: _inputs_all

###############################################################################
# -------------------------  Utility & prep rules  ----------------------------
###############################################################################

rule copy_to_matrix:
    input:  "data/raw/{ds}.csv"
    output: "data/processed/{ds}_matrix.csv"
    conda:  ENV_YAML
    shell:  "cp {input} {output}"

# CRC Excel -> processed matrix
rule crc_to_matrix:
    input:  "data/raw/CRC_data_genus_shannon.xlsx"
    output: matrix="data/processed/CRC_microbiome_matrix.csv"
    params:
        sheet=None,
        id_cols=["ID","Sample","Samples","Subject"],
        label_cols=["Group","Groups","Label"]
    conda: ENV_YAML
    script: "../scripts/python/preprocess_crc_genus.py"

# System info snapshot
rule stage1_sysinfo:
    output: "results/{ds}/stage1/system_info.json"
    run:
        import platform, time, json
        out = Path(output[0]); out.parent.mkdir(parents=True, exist_ok=True)
        meta = dict(
            timestamp=time.strftime("%Y-%m-%dT%H:%M:%S"),
            python=platform.python_version(),
            cores=mp.cpu_count(),
            ram_GiB=round(psutil.virtual_memory().total/2**30, 1),
            run_cores=RUN_CORES
        )
        out.write_text(json.dumps(meta, indent=2))


rule generate_seed:
    output: "results/{ds}/stage1/seed.txt"
    shell: """
        mkdir -p results/{wildcards.ds}/stage1
        echo 42 > {output}
    """

###############################################################################
# ---------------------------------  S T A G E 1 ------------------------------
###############################################################################
rule mccv_stage1:
    input:
        matrix="data/processed/{ds}_matrix.csv",
        seed="results/{ds}/stage1/seed.txt"
    output:
        metrics = "results/{ds}/stage1/cores{cores}/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/cores{cores}/freq_k{K}.csv",
        sl_wts  = "results/{ds}/stage1/cores{cores}/sl_weights_k{K}.tsv"
    log:
        "results/{ds}/stage1/cores{cores}/mccv_k{K}.log"
    params:
        k="{K}",
        n_splits=config.get("n_splits", 100),
        title="{ds}"
    benchmark:
        "results/{ds}/stage1/cores{cores}/wall_clock_k{K}.txt"
    threads: 96
    conda:  ENV_YAML
    script: "../scripts/python/mccv_stage1.py"

# Freeze panels from the NA-core run
rule freeze_gene_panel:
    input:  "results/{ds}/stage1/coresNA/freq_k{K}.csv"
    output:
        panel  = "results/{ds}/stage1/panel_k{K}.txt",
        counts = "results/{ds}/stage1/panel_k{K}_counts.txt"
    params: k="{K}"
    conda:  ENV_YAML
    script: "../scripts/python/freeze_gene_panel.py"

###############################################################################
# ---------------------------------  S T A G E 2 ------------------------------
###############################################################################
rule stage2_eval:
    input:
        matrix   = "data/processed/{ds}_matrix.csv",
        gene_set = "results/{ds}/stage1/panel_k{K}.txt"
    output:
        metrics   = "results/{ds}/stage2/metrics_k{K}.tsv",
        per_split = "results/{ds}/stage2/per_split_metrics_k{K}.tsv",
        sl_wts    = "results/{ds}/stage2/sl_weights_k{K}.tsv"
    params:
        k="{K}",
        n_splits=config.get("n_splits_stage2", 100)
    threads: 96
    conda:  ENV_YAML
    script: "../scripts/python/stage2_eval.py"

###############################################################################
# ------------------ Wall‑clock collection & aggregation ----------------------
###############################################################################
# Collect per-core wallclock files
rule record_wall_clock:
    input:  lambda wc: [f"results/{wc.ds}/stage1/cores{wc.cores}/wall_clock_k{k}.txt" for k in SIG_SIZES]
    output: "results/{ds}/stage1/cores{cores}/wall_clock.tsv"
    params: run_cores="{cores}"
    conda:  ENV_YAML
    script: "../scripts/python/record_wall_clock.py"

# Merge explicit set of wall_clock.tsv runs into wall_clock_all.tsv
rule wall_clock_all:
    input:  lambda wc: [f"results/{wc.ds}/stage1/cores{c}/wall_clock.tsv" for c in MEASURE_CORES]
    output: "results/{ds}/stage1/wall_clock_all.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/merge_wall_clocks.py"

###############################################################################
# -------- Stage‑1 aggregation, per‑core summaries, plots ---------------------
###############################################################################
# (A) Dataset-level Stage‑1 aggregation across K
rule stage1_summary_dataset:
    input:  lambda wc: stage1_metrics_list(wc.ds, "NA")
    output:
        summary = "results/{ds}/stage1/summary_stage1.tsv",
        tagged  = "results/{ds}/stage1/summary_stage1_NA.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_stage1.py"

# (B) Per‑core Stage‑1 aggregation across K → cores{cores}/stage1_summary.tsv
rule aggregate_stage1_per_core:
    input:  lambda wc: stage1_metrics_list(wc.ds, wc.cores)
    output: "results/{ds}/stage1/cores{cores}/stage1_summary.tsv"
    run:
        import pandas as pd
        from pathlib import Path
        rows = []
        for fp in input:
            # infer K from filename "*_k{K}.tsv"
            K = int(Path(fp).stem.split('_k')[-1])
            df = pd.read_csv(fp, sep='\t')
            grp = df.groupby('model', as_index=False)\
                    .agg(Train_mean=('train_s', 'mean'),
                         Pred_mean =('pred_s',  'mean'),
                         Train_total=('train_s','sum'),
                         Pred_total =('pred_s',  'sum'))
            grp['K'] = K
            rows.append(grp)
        Path(output[0]).parent.mkdir(parents=True, exist_ok=True)
        import pandas as pd
        pd.concat(rows, ignore_index=True).to_csv(output[0], sep='\t', index=False)

# (C) Merge per-core stage1_summary.tsv files → model_runtime_vs_cores.tsv
rule merge_model_runtimes:
    input:  lambda wc: [f"results/{wc.ds}/stage1/cores{c}/stage1_summary.tsv" for c in MEASURE_CORES]
    output: "results/{ds}/stage1/model_runtime_vs_cores.tsv"
    run:
        import pandas as pd
        from pathlib import Path
        rows = []
        for fp in input:
            cores_str = Path(fp).parent.name.replace("cores", "")
            df = pd.read_csv(fp, sep="\t")
            df["cores"] = int(cores_str) if cores_str.isdigit() else cores_str
            rows.append(df)
        Path(output[0]).parent.mkdir(parents=True, exist_ok=True)
        if rows:
            (pd.concat(rows)
             .sort_values(["model", "cores", "K"])
             .to_csv(output[0], sep="\t", index=False))
        else:
            pd.DataFrame(columns=["model", "K", "Train_mean", "Pred_mean",
                                  "Train_total", "Pred_total", "cores"])\
              .to_csv(output[0], sep="\t", index=False)

# (D) Stage‑1 per‑K detailed figures
rule plot_stage1:
    input:
        metrics = "results/{ds}/stage1/coresNA/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/coresNA/freq_k{K}.csv"
    output: directory(f"{FIG_ROOT}/{{ds}}/stage1_k{{K}}")
    params: title="{ds} | K={K}"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1.py"

# (E) Stage‑1 summary figures
rule plot_stage1_summary:
    input: "results/{ds}/stage1/summary_stage1.tsv"
    output:
        MCE         = f"{FIG_ROOT}/{{ds}}/stage1_summary/MCE.png",
        Sensitivity = f"{FIG_ROOT}/{{ds}}/stage1_summary/Sensitivity.png",
        Specificity = f"{FIG_ROOT}/{{ds}}/stage1_summary/Specificity.png"
    params: title="{ds}"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1_summary.py"

###############################################################################
# -------- Stage‑2 aggregation & plots ----------------------------------------
###############################################################################
rule aggregate_stage2:
    input:  lambda wc: stage2_metrics_list(wc.ds)
    output:
        summary = "results/{ds}/stage2/summary_stage2.tsv",
        tagged  = f"results/{{ds}}/stage2/summary_stage2_{RUN_CORES}.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_stage2.py"

rule plot_stage2_per_k:
    input:
        metrics = "results/{ds}/stage2/metrics_k{K}.tsv",
        freq    = "results/{ds}/stage1/coresNA/freq_k{K}.csv"
    output: directory(f"{FIG_ROOT}/{{ds}}/stage2_k{{K}}")
    params: title="{ds} | K={K} (Stage‑2)"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage2_agg.py"

rule plot_stage2_summary:
    input: "results/{ds}/stage2/summary_stage2.tsv"
    output:
        MCE         = f"{FIG_ROOT}/{{ds}}/stage2_summary/MCE.png",
        Sensitivity = f"{FIG_ROOT}/{{ds}}/stage2_summary/Sensitivity.png",
        Specificity = f"{FIG_ROOT}/{{ds}}/stage2_summary/Specificity.png"
    params: title="{ds} (Stage‑2)"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage2_summary.py"


###############################################################################
# -------------  SuperLearner weight aggregation & plots  ---------------------
###############################################################################
rule aggregate_sl_weights_stage1:
    input:  lambda wc: [f"results/{wc.ds}/stage1/coresNA/sl_weights_k{k}.tsv" for k in SIG_SIZES]
    output: "results/{ds}/stage1/sl_weights_mean.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_sl_weights.py"

rule plot_sl_weights_stage1:
    input: "results/{ds}/stage1/sl_weights_mean.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage1_summary/SL_weights.png"
    params: title="{ds} (Stage‑1)"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weights.py"

rule aggregate_sl_weights_stage2:
    input:  lambda wc: [f"results/{wc.ds}/stage2/sl_weights_k{k}.tsv" for k in SIG_SIZES]
    output: "results/{ds}/stage2/sl_weights_mean.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_sl_weights.py"

rule plot_sl_weights_stage2:
    input: "results/{ds}/stage2/sl_weights_mean.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage2_summary/SL_weights.png"
    params: title="{ds} (Stage‑2)"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weights.py"

###############################################################################
# -------------  Boxplot summaries --------------------------------------------
###############################################################################
rule plot_stage1_box_summary:
    input:  lambda wc: [f"results/{wc.ds}/stage1/coresNA/metrics_k{k}.tsv" for k in SIG_SIZES]
    output:
        MCE         = f"{FIG_ROOT}/{{ds}}/stage1_box/MCE.png",
        Sensitivity = f"{FIG_ROOT}/{{ds}}/stage1_box/Sensitivity.png",
        Specificity = f"{FIG_ROOT}/{{ds}}/stage1_box/Specificity.png"
    params:
        title="{ds}",
        n_splits=config.get("n_splits", 100)
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage1_box_summary.py"


rule plot_stage2_box_summary:
    input:  lambda wc: [f"results/{wc.ds}/stage2/per_split_metrics_k{k}.tsv" for k in SIG_SIZES]
    output:
        MCE         = f"{FIG_ROOT}/{{ds}}/stage2_box/MCE.png",
        Sensitivity = f"{FIG_ROOT}/{{ds}}/stage2_box/Sensitivity.png",
        Specificity = f"{FIG_ROOT}/{{ds}}/stage2_box/Specificity.png"
    params:
        title="{ds} (Stage‑2)",
        n_splits=config.get("n_splits_stage2", 100)
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_stage2_box_summary.py"


###############################################################################
# -------------  SL weight‑count aggregation & plots --------------------------
###############################################################################
rule aggregate_sl_weight_counts_stage1:
    input:  lambda wc: [f"results/{wc.ds}/stage1/coresNA/sl_weights_k{k}.tsv" for k in SIG_SIZES]
    output:
        positive = "results/{ds}/stage1/sl_positive_counts.tsv",
        highest  = "results/{ds}/stage1/sl_highest_counts.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_sl_weight_counts_stage1.py"

rule aggregate_sl_weight_counts_stage2:
    input:  lambda wc: [f"results/{wc.ds}/stage2/sl_weights_k{k}.tsv" for k in SIG_SIZES]
    output:
        positive = "results/{ds}/stage2/sl_positive_counts.tsv",
        highest  = "results/{ds}/stage2/sl_highest_counts.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/aggregate_sl_weight_counts_stage2.py"

rule plot_sl_weight_counts_stage1_positive:
    input: "results/{ds}/stage1/sl_positive_counts.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage1/sl_positive_bar.png"
    params:
        title="{ds} | Stage 1 | Positive SL Weights",
        type="positive",
        stage="stage1"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weight_counts.py"

rule plot_sl_weight_counts_stage1_highest:
    input: "results/{ds}/stage1/sl_highest_counts.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage1/sl_highest_bar.png"
    params:
        title="{ds} | Stage 1 | Highest SL Weights",
        type="highest",
        stage="stage1"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weight_counts.py"

rule plot_sl_weight_counts_stage2_positive:
    input: "results/{ds}/stage2/sl_positive_counts.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage2/sl_positive_bar.png"
    params:
        title="{ds} | Stage 2 | Positive SL Weights",
        type="positive",
        stage="stage2"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weight_counts.py"

rule plot_sl_weight_counts_stage2_highest:
    input: "results/{ds}/stage2/sl_highest_counts.tsv"
    output: f"{FIG_ROOT}/{{ds}}/stage2/sl_highest_bar.png"
    params:
        title="{ds} | Stage 2 | Highest SL Weights",
        type="highest",
        stage="stage2"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_sl_weight_counts.py"

###############################################################################
# ----------------------  Optional stability replicates  ----------------------
###############################################################################
rule mccv_stability_rep:
    input:
        matrix = "data/processed/{ds}_matrix.csv",
        stage2_metrics = "results/{ds}/stage2/metrics_k{K}.tsv"  # ensure stage2 done for K
    output:
        panel = "results/{ds}/stage1/stability_rep{rep}_panel_k{K}.txt"
    params:
        k = "{K}",
        n_splits = config.get("n_splits", 100),
        rep = "{rep}"
    conda:  ENV_YAML
    script: "../scripts/python/mccv_stability_rep.py"

rule compute_panel_stability:
    input:
        original_panel = "results/{ds}/stage1/panel_k{K}.txt",
        rep_panels = lambda wc: [f"results/{wc.ds}/stage1/stability_rep{rep}_panel_k{wc.K}.txt" for rep in STABILITY_REPS]
    output:
        tsv = "results/{ds}/stage1/stability_reps_k{K}.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/compute_panel_stability.py"

rule plot_panel_stability_summary:
    input: lambda wc: [f"results/{wc.ds}/stage1/stability_reps_k{k}.tsv" for k in SIG_SIZES]
    output:
        png = f"{FIG_ROOT}/{{ds}}/stage1/panel_stability_summary.png",
        tsv = "results/{ds}/stage1/panel_stability_summary.tsv"
    conda:  ENV_YAML
    script: "../scripts/python/plots/plot_panel_stability_summary.py"

###############################################################################
# -----------------------------  Runtime plots  -------------------------------
###############################################################################
# --- helper to pick any available per-core stage1 summary for vs-K lines ----
def _pick_stage1_summary(dataset):
    import glob, os
    cands = sorted(glob.glob(f"results/{dataset}/stage1/cores*/stage1_summary.tsv"))
    return cands[-1] if cands else f"results/{dataset}/stage1/coresNA/stage1_summary.tsv"

rule plot_runtime:
    input:
        stage1_summary = lambda wc: _pick_stage1_summary(wc.dataset),
        cores_table    = "results/{dataset}/stage1/wall_clock_all.tsv",
        model_table    = "results/{dataset}/stage1/model_runtime_vs_cores.tsv"
    output:
        Train_mean              = "Figures/{dataset}/runtime/Train_mean_vs_K.png",
        Pred_mean               = "Figures/{dataset}/runtime/Pred_mean_vs_K.png",
        Train_total             = "Figures/{dataset}/runtime/Train_total_vs_K.png",
        Pred_total              = "Figures/{dataset}/runtime/Pred_total_vs_K.png",
        Runtime_total           = "Figures/{dataset}/runtime/Runtime_total_vs_K.png",
        Wall_clock_vs_cores     = "Figures/{dataset}/runtime/Wall_clock_vs_cores.png",
        Speed_up                = "Figures/{dataset}/runtime/Speed_up.png",
        Train_total_vs_cores    = "Figures/{dataset}/runtime/Train_total_vs_cores.png",
        Pred_total_vs_cores     = "Figures/{dataset}/runtime/Pred_total_vs_cores.png",
        Train_total_vs_cores_zoom = "Figures/{dataset}/runtime/Train_total_vs_cores_zoom.png"
    params:
        title = "{dataset}"
    script:
        "../scripts/python/plots/plot_runtime.py"


###############################################################################
# ---------------------------  Host sentinel  ---------------------------------
###############################################################################
rule host_analysis:
    input: _host_inputs
    output: touch("host_analysis.complete")
