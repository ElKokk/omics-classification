###############################################################################
# Config
###############################################################################
import os
ENV = os.path.join(os.getcwd(), "env", "environment.yml")


configfile: "workflow/config.yaml"

DATASETS   = config["datasets"]
SIG_SIZES  = config["sig_sizes"]
FIXED_K    = config["fixed_k"]

###############################################################################
# Final target
###############################################################################

rule all:
    input:
        expand("results/{ds}/stage2/metrics.tsv", ds=DATASETS)

###############################################################################
# Stage 0 – I will check that later if needed
###############################################################################

rule copy_matrix:
    input:
        "data/raw/{ds}.csv"
    output:
        "data/processed/{ds}_matrix.csv"
    conda:
        ENV
    shell:
        "cp {input} {output}"

###############################################################################
#Stage 1 – Monte‑Carlo CV for variable‑k feature selection
###############################################################################

rule mccv_stage1:
    input:
        matrix="data/processed/{ds}_matrix.csv"
    output:
        metrics="results/{ds}/stage1/metrics_k{K}.tsv",
        freq   ="results/{ds}/stage1/freq_k{K}.csv"
    params:
        k="{K}"
    script:
        "../scripts/python/mccv_stage1.py"

###############################################################################
# Stage 2 – fixed‑signature
###############################################################################


rule stage2_fixed_signature:
    input:
        matrix   = "data/processed/{ds}_matrix.csv",
        gene_set = lambda w: f"results/{w.ds}/stage1/freq_k{config['fixed_k'][w.ds]}.csv"
    output:
        "results/{ds}/stage2/metrics.tsv"
    params:
        fixed    = lambda w: config["fixed_k"][w.ds]
    script:
        "../scripts/python/stage2_eval.py"


